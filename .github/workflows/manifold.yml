# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    container:
      image: docker://nvidia/cuda:11.6.0-devel-ubuntu20.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Install dependencies
      run: |
        apt-get -y update
        DEBIAN_FRONTEND=noninteractive apt install -y libcgal-dev libomp-dev nodejs git python3
    - uses: actions/checkout@v3
      with:
        submodules: true
    - uses: jwlawson/actions-setup-cmake@v1.12
    - name: Build WASM
      run: |
        patch third_party/assimp/code/CMakeLists.txt < assimp.diff
        mkdir buildWASM
        cd buildWASM
        # setup emscripten
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install latest
        ./emsdk activate latest
        . ./emsdk_env.sh
        cd ../
        # actual build step
        emcmake cmake -DCMAKE_BUILD_TYPE=Release .. && emmake make -j
    - name: Build CPP
      run: |
        mkdir buildCPP
        cd buildCPP
        cmake -DCMAKE_BUILD_TYPE=Release -DTHRUST_BACKEND=CPP .. && make -j
    - name: Build OMP
      run: |
        mkdir buildOMP
        cd buildOMP
        cmake -DCMAKE_BUILD_TYPE=Release -DTHRUST_BACKEND=OMP .. && make -j
    - name: Test WASM
      run: |
        cd buildWASM/test
        node manifold_test.js
    - name: Test CPP
      run: |
        cd buildCPP/test
        ./manifold_test
    - name: Test OMP
      run: |
        cd buildOMP/test
        ./manifold_test
    - name: Build CUDA
      run: |
        mkdir buildCUDA
        cd buildCUDA
        cmake -DCMAKE_BUILD_TYPE=Release .. && make
      
      
      
      
